{"version":3,"sources":["reducers/bookReducer.js","context/BookContext.js","components/Navbar.js","components/BookDetails.js","components/BookList.js","components/BookForm.js","App.js","serviceWorker.js","index.js"],"names":["bookReducer","state","action","type","title","book","author","id","uuid","filter","BookContext","createContext","BookContextProvider","props","useReducer","localData","localStorage","getItem","JSON","parse","books","dispatch","useEffect","setItem","stringify","Provider","value","children","Navbar","useContext","className","length","BookDetails","onClick","BookList","console","log","map","key","NewBookForm","useState","setTitle","setAuthor","onSubmit","e","preventDefault","placeholder","onChange","target","required","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qPAEaA,EAAc,SAAEC,EAAOC,GAChC,OAAOA,EAAOC,MACV,IAAK,WACD,MAAM,GAAN,mBAAUF,GAAV,CACI,CAAEG,MAAOF,EAAOG,KAAKD,MACrBE,OAAQJ,EAAOG,KAAKC,OACpBC,GAAGC,SAEX,IAAK,cACD,OAAOP,EAAMQ,QAAO,SAAAJ,GAAI,OAAGA,EAAKE,KAAKL,EAAOK,MAChD,QACI,OAAON,ICVNS,EAAcC,0BAkBZC,EAhBa,SAACC,GAAW,IAAD,EACVC,qBAAWd,EAAY,IAAI,WAChD,IAAMe,EAAYC,aAAaC,QAAQ,SACvC,OAAOF,EAAYG,KAAKC,MAAMJ,GAAa,MAHZ,mBAC5BK,EAD4B,KACtBC,EADsB,KASlC,OAJDC,qBAAU,WACNN,aAAaO,QAAQ,QAAQL,KAAKM,UAAUJ,MAC7C,CAACA,IAGC,kBAACV,EAAYe,SAAb,CAAsBC,MAAO,CAACN,QAAMC,aAC/BR,EAAMc,WCHLC,EAVA,WAAO,IACXR,EAASS,qBAAWnB,GAApBU,MACP,OACI,yBAAKU,UAAU,UACX,+CACA,gDAAsBV,EAAMW,OAA5B,YCKGC,EAXK,SAAC,GAAY,IAAX3B,EAAU,EAAVA,KACVgB,EAAaQ,qBAAWnB,GAAxBW,SAER,OACI,wBAAIY,QAAS,kBAAIZ,EAAS,CAAClB,KAAK,cAAcI,GAAKF,EAAKE,OACpD,yBAAKuB,UAAU,SAASzB,EAAKD,OAC7B,yBAAK0B,UAAU,UAAUzB,EAAKC,UCgB3B4B,EArBE,WAAO,IAAD,EACQL,qBAAWnB,GAA9BU,EADW,EACXA,MAAMC,EADK,EACLA,SAEd,OADAc,QAAQC,IAAIf,GACLD,EAAMW,OAEL,yBAAKD,UAAU,aACX,4BAEQV,EAAMiB,KAAI,SAAAhC,GACN,OAAQ,kBAAC,EAAD,CAAaA,KAAMA,EAAMiC,IAAKjC,EAAKE,UAM1D,yBAAKuB,UAAU,SAAf,sBCMES,EAtBK,WAAO,IACjBlB,EAAYQ,qBAAWnB,GAAvBW,SADgB,EAEEmB,mBAAS,IAFX,mBAEhBpC,EAFgB,KAEVqC,EAFU,OAGMD,mBAAS,IAHf,mBAGflC,EAHe,KAGPoC,EAHO,KAWtB,OACI,0BAAMC,SARU,SAAAC,GACjBA,EAAEC,iBACFxB,EAAS,CAAClB,KAAK,WAAWE,KAAK,CAC3BD,QAAME,YACVmC,EAAS,IACTC,EAAU,MAIL,2BAAOvC,KAAK,OAAO2C,YAAY,aAAapB,MAAOtB,EACnD2C,SAAU,SAACH,GAAD,OAAKH,EAASG,EAAEI,OAAOtB,QAAQuB,UAAQ,IACjD,2BAAO9C,KAAK,OAAO2C,YAAY,SAASpB,MAAOpB,EAC/CyC,SAAU,SAACH,GAAD,OAAKF,EAAUE,EAAEI,OAAOtB,QAAQuB,UAAQ,IAClD,2BAAO9C,KAAK,SAASuB,MAAM,eCCxBwB,MAZf,WACE,OACE,yBAAKpB,UAAU,OACb,kBAAC,EAAD,KACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCFcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,a","file":"static/js/main.ab475424.chunk.js","sourcesContent":["//import React from 'react';\r\nimport uuid from 'uuid/v1';\r\nexport const bookReducer = ( state, action) => {\r\n    switch(action.type){\r\n        case 'ADD_BOOK' :\r\n            return[...state,\r\n                { title: action.book.title,\r\n                author: action.book.author,\r\n                id:uuid()\r\n            }]\r\n        case 'REMOVE_BOOK' :\r\n            return state.filter(book =>book.id!==action.id)\r\n        default:\r\n            return state\r\n        \r\n    }\r\n}","import React, {createContext, useReducer, useEffect} from 'react';\r\nimport { bookReducer } from '../reducers/bookReducer';\r\n\r\nexport const BookContext = createContext();\r\n\r\nconst BookContextProvider = (props) => {\r\n    const [books,dispatch] = useReducer(bookReducer,[], ()=>{\r\n        const localData = localStorage.getItem('books');\r\n        return localData ? JSON.parse(localData) : []\r\n    });\r\n    useEffect(()=> {\r\n        localStorage.setItem('books',JSON.stringify(books))\r\n    }, [books]);\r\n    \r\n     return(\r\n         <BookContext.Provider value={{books,dispatch}}>\r\n             {props.children}\r\n         </BookContext.Provider>\r\n     )\r\n}\r\n\r\nexport default BookContextProvider;\r\n ","import React,{useContext} from 'react';\r\nimport { BookContext } from '../context/BookContext';\r\n\r\nconst Navbar = () => {\r\n    const {books} = useContext(BookContext)\r\n    return ( \r\n        <div className=\"navbar\">\r\n            <h1>Book Collection</h1>\r\n            <p>currently we have {books.length} books</p>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Navbar;","import React, { useContext } from 'react';\r\nimport { BookContext } from '../context/BookContext';\r\nconst BookDetails = ({book}) => {\r\n    const { dispatch } = useContext(BookContext);\r\n\r\n    return ( \r\n        <li onClick={()=>dispatch({type:'REMOVE_BOOK',id : book.id})}>\r\n            <div className=\"title\">{book.title}</div>\r\n            <div className=\"author\">{book.author}</div>\r\n        </li>\r\n     );\r\n}\r\n \r\nexport default BookDetails;","import React, { useContext } from 'react';\r\nimport { BookContext } from '../context/BookContext';\r\nimport BookDetails from './BookDetails';\r\nconst BookList = () => {\r\n    const { books,dispatch } = useContext(BookContext);\r\n    console.log(dispatch)\r\n    return books.length ? \r\n        ( \r\n            <div className=\"book-list\">\r\n                <ul>\r\n                    {\r\n                        books.map(book=>{\r\n                            return( <BookDetails book={book} key={book.id} />);\r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>\r\n         ):(\r\n             <div className=\"empty\">No books to read.</div>\r\n         )\r\n      \r\n        ;\r\n}\r\n \r\nexport default BookList;","import React, { useContext, useState } from 'react';\r\nimport { BookContext } from '../context/BookContext';\r\nconst NewBookForm = () => {\r\n   const {dispatch} = useContext(BookContext);\r\n   const [title,setTitle] = useState('');\r\n   const [ author, setAuthor] = useState('');\r\n   const handleSubmit = e => {\r\n       e.preventDefault();\r\n       dispatch({type:'ADD_BOOK',book:{\r\n           title,author}});\r\n       setTitle('');\r\n       setAuthor('');\r\n   }\r\n    return (  \r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" placeholder=\"book title\" value={title} \r\n            onChange={(e)=>setTitle(e.target.value)} required />\r\n            <input type=\"text\" placeholder=\"author\" value={author} \r\n            onChange={(e)=>setAuthor(e.target.value)} required />\r\n            <input type=\"submit\" value=\"add book\" />\r\n        </form>\r\n    );\r\n}\r\n \r\nexport default NewBookForm;","import React from 'react';\nimport Navbar from './components/Navbar';\nimport BookContextProvider from './context/BookContext';\nimport BookList from './components/BookList';\nimport NewBookForm from './components/BookForm';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BookContextProvider>\n      <Navbar />\n      <BookList />\n      <NewBookForm />\n      </BookContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}